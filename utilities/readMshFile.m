function [ nodeData, elementDataMap, materialData, propertyData ] = readMshFile( file )
%READMSHFILE Reads a msh file generated by Gmsh
%   [ nodeData, elementDataMap, materialData, propertyData ] = readMshFile( file )
fid = fopen(file);
    
%define the arrays for material and properties
materialData = Material;
propertyData = PropertyContainer;

tline = fgetl(fid);
while ischar(tline)
    
    if tline == -1
        continue
    end

    
    if regexp(tline,'Material') == 2
        nMaterial = str2double(strsplit(tline));
        nMaterial = nMaterial(2);
        material = Material;
        
        tline = fgetl(fid);
        
        while ~strcmp(tline,'$EndMaterial')
            param = strsplit(tline);
            material.addParameter(cell2mat(param(1)),str2double(param(2)));
            tline = fgetl(fid);
        end
        
        materialData(nMaterial) = material;
        
    end
    
    if regexp(tline,'Properties') == 2
        nProperty = str2double(strsplit(tline));
        nProperty = nProperty(2);
        property = PropertyContainer;
        
        tline = fgetl(fid);
        
        while ~strcmp(tline,'$EndProperties')
            prop = strsplit(tline);
            property.addValue(cell2mat(prop(1)), str2double(prop(2)));
            tline = fgetl(fid);
        end
        
        propertyData(nProperty) = property;
        
    end
    
    if strcmp(tline,'$Nodes')
        nodeData = [];
        
        % skip to the first line with nodes
        tline = fgetl(fid);
        if (length(str2num(tline)) == 1)
            tline = fgetl(fid);
        end
        while ~strcmp(tline,'$EndNodes')
            nodeData = [nodeData; cell2mat(textscan(tline,'%f'))'];
            tline = fgetl(fid);
        end
        
    end
    
    if strcmp(tline,'$Elements')
        elements2nLine = [];        %elementType=1
        elements3nTriangle = [];    %elementType=2
        elements4nQuad = [];        %elementType=3
        elements1nPoint = [];       %elementType=15
        
        % skip to the first line with elements
        tline = fgetl(fid);
        if (length(str2num(tline)) == 1)
            tline = fgetl(fid);
        end
        
        while ~strcmp(tline,'$EndElements')
            currentElement = cell2mat(textscan(tline,'%f'));
            elementType = currentElement(2);
            % the "physical tag" will be used to assign material properties
            % and boundary conditions. 2d: points -> bc, lines -> material
            % 3d: lines -> bc, tetras.. -> material
            
            %             nTags = currentElement(3);
            %             currentElement(2:3+nTags) = [];
            
            % read element data. the resulting arrays have the form id,
            % propertyTag, nodes
            switch elementType
                case 1 % 2-node line
                    currentElement(2:length(currentElement)-3)= [];
                    elements2nLine = [elements2nLine; currentElement'];
                case 2 % 3-node triangle
                    currentElement(2:length(currentElement)-4)= [];
                    elements3nTriangle = [elements3nTriangle; currentElement'];
                case 3 %4-node quadrangle
                    currentElement(2:length(currentElement)-5)= [];
                    elements4nQuad = [elements4nQuad; currentElement'];
                case 15 %1-node point
                    currentElement(2:length(currentElement)-2)= [];
                    elements1nPoint = [elements1nPoint; currentElement'];
            end
            
            tline = fgetl(fid);
        end
        
    end
    
    tline = fgetl(fid);
    
end

fclose(fid);

elementDataMap = containers.Map;
elementDataMap('elements2nLine') = elements2nLine;
elementDataMap('elements3nTriangle') = elements3nTriangle;
elementDataMap('elements4nQuad') = elements4nQuad;
elementDataMap('elements1nPoint') = elements1nPoint;


end

